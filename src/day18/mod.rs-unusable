use super::common::Step;
use std::fmt;

pub fn test_result(step: &Step) -> String {
    match step {
        Step::First => String::from("4140"),
        Step::Second => String::from("3993"),
    }
}

#[derive(Clone)]
enum Pair {
    Leaf(i32),
    Branch(Tree, Tree),
}

impl Pair {
    fn is_leaf(&self) -> bool {
        match self {
            Pair::Leaf(_) => true,
            Pair::Branch(_,_) => false,
        }
    }
}

#[derive(Clone)]
struct Tree(Box<Pair>);

impl Tree {
    fn format(&self) -> String {
        match &*self.0 {
            Pair::Leaf(v) => v.to_string(),
            Pair::Branch(l, r) => format!("[{},{}]", l.format(), r.format()),
        }
    }

    fn add(self, other: Tree) -> Tree {
        Tree(Box::new(Pair::Branch(self, other)))
    }

    fn add_to_leaf(&mut self, value: i32, left: bool) {
        match &mut *self.0 {
            Pair::Leaf(v) => self.0 = Box::new(Pair::Leaf(*v + value)),
            Pair::Branch(l, r) => {
                if left {
                    r.add_to_leaf(value, true)
                } else {
                    l.add_to_leaf(value, false)
                }
            }
        };
    }

    fn explode(&mut self, depth: usize) -> Option<(i32, i32)> {
        let check = match &*self.0 {
            Pair::Leaf(_) => panic!("Unexpectedly got to a leaf!"),
            Pair::Branch(l,r) =>
                if let (Pair::Leaf(lv), Pair::Leaf(rv)) = (&*l.0, &*r.0) {
                    if depth > 4 {
                        Some((*lv, *rv))
                    } else {
                        None
                    }
                } else {
                    None
                },
        };
        if let Some(_) = check {
            self.0 = Box::new(Pair::Leaf(0));
            return check;
        } else {
            let check = if let Pair::Branch(Box(Pair::Branch(l,r)),_) = &*self.0 {
                Some((l,r))
            } else {
                None
            };
            None
        /*
        match &mut *self.0 {
            Pair::Leaf(_) => panic!("Unexpectedly got to leaf!"),
            Pair::Branch(l, r) => {
                if let (Pair::Leaf(lv), Pair::Leaf(rv)) = (&*l.0, &*r.0) {
                    if depth > 4 {
                        self.0 = Box::new(Pair::Leaf(0));
                        Some((*lv, *rv))
                    } else {
                        None
                    }
                } else {
                    None
                }
                    if let Some((lv, rv)) = match &*l.0 {
                        Pair::Leaf(_) => None,
                        Pair::Branch(&mut l, &mut r) => {
                            if let Some((lv, rv)) = l.explode(depth + 1) {
                                if rv >= 0 {
                                    r.add_to_leaf(rv, false);
                                }
                                Some((lv, -1))
                            } else if let Some((lv, rv)) = r.explode(depth + 1) {
                                if lv >= 0 {
                                    l.add_to_leaf(lv, true);
                                }
                                Some((-1, rv))
                            } else {
                                None
                            }
                        }
                    } {
                        Some((lv, rv))
                    } else if let Some((lv, rv)) = match &*r.0 {
                        Pair::Leaf(_) => None,
                        Pair::Branch(&mut l, &mut r) => {
                            if let Some((lv, rv)) = l.explode(depth + 1) {
                                if rv >= 0 {
                                    r.add_to_leaf(rv, false);
                                }
                                Some((lv, -1))
                            } else if let Some((lv, rv)) = r.explode(depth + 1) {
                                if lv >= 0 {
                                    l.add_to_leaf(lv, true);
                                }
                                Some((-1, rv))
                            } else {
                                None
                            }
                        }
                    } {
                        Some((lv, rv))
                    } else {
                        None
                    }
                }
            }
                */
        }
    }

    fn split(&mut self) -> bool {
        match &mut *self.0 {
            Pair::Leaf(v) => {
                if *v > 9 {
                    let l = *v / 2;
                    self.0 = Box::new(Pair::Branch(
                        Tree(Box::new(Pair::Leaf(l))),
                        Tree(Box::new(Pair::Leaf(*v - l))),
                    ));
                    true
                } else {
                    false
                }
            }
            Pair::Branch(l, r) => l.split() || r.split(),
        }
    }

    fn reduce(&mut self) {}
}

impl fmt::Display for Tree {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.format())
    }
}

fn parse(number: &[char]) -> (usize, Tree) {
    if number[0] == '[' {
        let (l, left) = parse(&number[1..]);
        assert_eq!(number[l + 1], ',');
        let (r, right) = parse(&number[l + 2..]);
        assert_eq!(number[r + l + 2], ']');
        (r + l + 3, Tree(Box::new(Pair::Branch(left, right))))
    } else {
        (
            1,
            Tree(Box::new(Pair::Leaf(number[0].to_string().parse().unwrap()))),
        )
    }
}

fn count(data: &[Vec<char>]) -> i32 {
    let (i, number) = parse(&data[0]);
    println!("{}", number);
    assert_eq!(i, data[0].len());
    0
}

pub fn solution(step: &Step, input: &[String]) -> String {
    let data: Vec<Vec<char>> = input.iter().map(|line| line.chars().collect()).collect();
    match step {
        Step::First => count(&data).to_string(),
        Step::Second => count(&data).to_string(),
    }
}
